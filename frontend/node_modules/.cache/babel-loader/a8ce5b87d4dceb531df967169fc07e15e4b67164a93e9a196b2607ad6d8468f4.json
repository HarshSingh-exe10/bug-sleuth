{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{apiService}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for existing authentication on app load\nconst checkAuth=async()=>{const token=localStorage.getItem('access_token');const storedUser=localStorage.getItem('user');if(token&&storedUser){try{const userData=JSON.parse(storedUser);setUser(userData);}catch(error){console.error('Error parsing stored user data:',error);localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('user');}}setLoading(false);};checkAuth();},[]);const login=async credentials=>{try{const response=await apiService.login(credentials);// Store tokens and user data\nlocalStorage.setItem('access_token',response.access);localStorage.setItem('refresh_token',response.refresh);localStorage.setItem('user',JSON.stringify(response.user));setUser(response.user);}catch(error){throw error;}};const register=async userData=>{try{await apiService.register(userData);// Auto-login after registration\nawait login({username:userData.username,password:userData.password});}catch(error){throw error;}};const logout=()=>{localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('user');setUser(null);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,login,register,logout},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","storedUser","userData","JSON","parse","error","console","removeItem","login","credentials","response","setItem","access","refresh","stringify","register","username","password","logout","Provider","value"],"sources":["C:/Users/harsh.singh/Desktop/bug-sleuth/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, AuthTokens, LoginForm, RegisterForm } from '../types';\r\nimport { apiService } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (credentials: LoginForm) => Promise<void>;\r\n  register: (userData: RegisterForm) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing authentication on app load\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('access_token');\r\n      const storedUser = localStorage.getItem('user');\r\n      \r\n      if (token && storedUser) {\r\n        try {\r\n          const userData = JSON.parse(storedUser);\r\n          setUser(userData);\r\n        } catch (error) {\r\n          console.error('Error parsing stored user data:', error);\r\n          localStorage.removeItem('access_token');\r\n          localStorage.removeItem('refresh_token');\r\n          localStorage.removeItem('user');\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (credentials: LoginForm) => {\r\n    try {\r\n      const response: AuthTokens = await apiService.login(credentials);\r\n      \r\n      // Store tokens and user data\r\n      localStorage.setItem('access_token', response.access);\r\n      localStorage.setItem('refresh_token', response.refresh);\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      \r\n      setUser(response.user);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterForm) => {\r\n    try {\r\n      await apiService.register(userData);\r\n      // Auto-login after registration\r\n      await login({ username: userData.username, password: userData.password });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}