{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh.singh\\\\Desktop\\\\bug-sleuth\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { apiService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing authentication on app load\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      const storedUser = localStorage.getItem('user');\n      if (token && storedUser) {\n        try {\n          const userData = JSON.parse(storedUser);\n          setUser(userData);\n        } catch (error) {\n          console.error('Error parsing stored user data:', error);\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          localStorage.removeItem('user');\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async credentials => {\n    try {\n      const response = await apiService.login(credentials);\n\n      // Store tokens and user data\n      localStorage.setItem('access_token', response.access);\n      localStorage.setItem('refresh_token', response.refresh);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      setUser(response.user);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await apiService.register(userData);\n      // Auto-login after registration\n      await login({\n        username: userData.username,\n        password: userData.password\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","storedUser","userData","JSON","parse","error","console","removeItem","login","credentials","response","setItem","access","refresh","stringify","register","username","password","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/harsh.singh/Desktop/bug-sleuth/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, AuthTokens, LoginForm, RegisterForm } from '../types';\r\nimport { apiService } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (credentials: LoginForm) => Promise<void>;\r\n  register: (userData: RegisterForm) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing authentication on app load\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('access_token');\r\n      const storedUser = localStorage.getItem('user');\r\n      \r\n      if (token && storedUser) {\r\n        try {\r\n          const userData = JSON.parse(storedUser);\r\n          setUser(userData);\r\n        } catch (error) {\r\n          console.error('Error parsing stored user data:', error);\r\n          localStorage.removeItem('access_token');\r\n          localStorage.removeItem('refresh_token');\r\n          localStorage.removeItem('user');\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (credentials: LoginForm) => {\r\n    try {\r\n      const response: AuthTokens = await apiService.login(credentials);\r\n      \r\n      // Store tokens and user data\r\n      localStorage.setItem('access_token', response.access);\r\n      localStorage.setItem('refresh_token', response.refresh);\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      \r\n      setUser(response.user);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterForm) => {\r\n    try {\r\n      const response = await apiService.register(userData);\r\n      // Auto-login after registration\r\n      await login({ username: userData.username, password: userData.password });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}